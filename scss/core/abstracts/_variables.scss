import Ember from 'ember';
import C from 'ui/utils/constants';
import {sortSemVer} from 'ui/utils/util';

export default Ember.Controller.extend({
    jnoty: Ember.inject.service(),
    modalService: Ember.inject.service('modal'),

    queryParams: ['version','filterby'],
    version: null,
    filterby: null,

    volumes: Ember.computed('model.openebsVolumes', function() {
        return this.get('model.openebsVolumes');
    }),

    filterItems: [{name: 'Applications', value:'applications'}, {name: 'Volumes', value:'volumes'}],

    // traverse into the pools and get the unique openebs versions
    // openebsVersions: Ember.computed('model.storagePool', function() {
    //     return this.getOpenebsVersionFromVolumes();
    // }),

    openebsVersions: ['1.1.0','1.3.0','1.4.0'],

    observeAvialableVersions: Ember.observer('openebsVersions.@each', function() {
        let selectedVersion = this.get('versions');
        let availableVersions = this.get('openebsVersions');
        console.log('versionMatch',availableVersions.indexOf(selectedVersion) <= -1);
        if (availableVersions.indexOf(selectedVersion) <= -1) {
            // version mismatch
            // reset queryparams and refresh model
            this._initParams();
        }
    }),
    init() {
        this._super(...arguments);
        setTimeout(()=>{
            console.log('Updage version list');
            this.set('openebsVersions',['1.3.0','1.4.0']);
        },20000);
    },
    // openebsVersions:['0.9.0','1.0.0','1.1.0'],
    clusterId: Ember.computed('model.cluster', function() {
        return this.get('model.cluster.id');
    }),
    upgradeKind: function(){
        return C.OPENEBS_UPGRADE.APPLICATION_UPGRADE.KIND;
    }.property('C'),

    // Target OpenEBS upgrade version, selected via dropdown
    selectedTargetVersion: null,

    /* List of all selected pool ids upgrade
       * @example
       * [{"id": "1msp1"}, {"id": "1msp2"} ...ids ]
       */
    selectedVolumesToUpgrade: null,
    actions: {
        setSelectedNav(selectedNavItem) {
            this.set('version', selectedNavItem);
        },
        setFilterBy(selectedFilter) {
            this.set('filterby', selectedFilter);
        },
        handleUpgradeRequest(targetVersion, applications) {
            //console.log('handleUpgradeRequest()----',targetVersion, applications);
            this.set('selectedTargetVersion',targetVersion);
            this.set('selectedVolumesToUpgrade',applications);
            this.send('upgradeVolumes');
        },
        upgradeVolumes() {
            if(this._validateInputs()){
                this._doUpgradeVolumes();
            }
            else {
                console.log('require inputs are not present to create an upgrade claim');
            }
        }
    },

    /**
     * @private
     */
    _initParams() {
        // initilize default params
        let allVersions = this.get('openebsVersions');
        let allFilters = this.get('filterItems');
        let firstVersion = allVersions[0];
        let firstFilter = allFilters[1].value;

        this.set('version',firstVersion);
        this.set('filterby',firstFilter);

    },
    _validateInputs() {
        const clusterId           = this.get('clusterId');
        const kind                = this.get('upgradeKind');
        const targetVersion       = this.get('selectedTargetVersion');
        const upgradeComponents   = this.get('selectedVolumesToUpgrade');
        //console.log('clusterId:',clusterId, 'kind:',kind, 'targetVersion:',targetVersion,'upgradeComponents:',upgradeComponents);

        if(clusterId && kind && targetVersion && upgradeComponents) {
            return true;
        }
        else{
            this.get('jnoty').warning('Warning', 'Select an available upgrade version.');
            return false;
        }
    },
    _doUpgradeVolumes () {
        // post request format
        /*
        {
            "clusterId": "1c3",
            "kind": "volumeUpgrade",
            "targetVersion": "1.1.0",

            "upgradeComponents": [
             {"pvUid": "1d9a1392-b51b-11e9-a4d0-42010a800fcb", appId:1ma54}
             {"pvUid": "1d9a1392-b51b-11e9-a4d0-42010a800fcb", appId:1ma54}
           ]
        }
       */
        const clusterId           = this.get('clusterId');
        const kind                = this.get('upgradeKind');
        const targetVersion       = this.get('selectedTargetVersion');
        const upgradeComponents   = this.get('selectedVolumesToUpgrade');

        const requestPayLoad = {
            type: C.OPENEBS_UPGRADE.UPGRADE_TEMPLATE.TYPE,
            clusterId: clusterId,
            kind: kind ,
            targetVersion: targetVersion,
            upgradeComponents: upgradeComponents
        };
        //console.log('payload',requestPayLoad);

        // Create a new Record and save it
        let newUpgradeRecord = this.get('userStore').createRecord(requestPayLoad);

        //console.log('newUpgradeRecord',newUpgradeRecord);
        this.get('modalService').toggleModal('modal-upgrade-openebs-volumes', Ember.Object.create({
            upgradeClaimRecord: newUpgradeRecord,

        }));
    },
    getOpenebsVersionFromVolumes() {
        let volumes = this.get('volumes');
        let uniqueVersions = [];

        // filter the identical versions and store it to uniqueVersions list
        volumes.forEach((volume)=>{
            try{
                if(Object.keys(volume.controller).length !== 0 && volume.controller) {
                    let version = volume.controller.labels['openebs.io/version'];
                    if(uniqueVersions.indexOf(version) <= -1) {
                        uniqueVersions.pushObject(version);
                    }
                }
            }
            catch(e){
                console.log('catch',e);
            }
        });
        // sort the versions in descending order
        let sortedVersions = sortSemVer(uniqueVersions, 'desc');
        return sortedVersions;
    }
});
